package model.entities;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import model.exceptions.DomainException;
import model.exceptions.DomainExceptions;

public class Reservation {
	
	private Integer roomNumber;
	private Date checkIn;
	private Date checkOut;
	
	// mascara da data
	private static SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	
	public Reservation(Integer roomNumber, Date checkIn, Date checkOut) {
		this.roomNumber = roomNumber;
		this.checkIn = checkIn;
		this.checkOut = checkOut;
	}
	public Integer getRoomNumber() {
		return roomNumber;
	}
	public void setRoomNumber(Integer roomNumber) {
		this.roomNumber = roomNumber;
	}
	public Date getcheckIn() {
		return checkIn;
	}
// deletar pois no UML existe um metodo para atualização de datas
//	public void setcheckIn(Date checkIn) {
//		this.checkIn = checkIn;
//	}
	public Date getcheckOut() {
		return checkOut;
	}
// deletar pois no UML existe um metodo para atualização de datas
//	public void setcheckOut(Date checkOut) {
//		this.checkOut = checkOut;
//	}
	
	// implementação do metodo duração de dias 
	public long duration(){
		long diff = checkOut.getTime() - checkIn.getTime();
		return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS); // converte horas em dias 
	}
		
	public void updateDates(Date checkIn, Date checkOut) {
		
		Date now = new Date(); //data hora de hoje
		if (checkIn.before(now) || checkOut.before(now)) {
			throw new DomainException("Reservation dates for update must be future dates");
		}
		if (!checkOut.after(checkIn)) {
			throw new DomainException("Check-out date must be after check-in date");
		} 
		this.checkIn = checkIn;
		this.checkOut = checkOut;	
	}
	
	public String toString(){
		return  "Room "
				+ roomNumber
				+ ", check-in: "
				+ sdf.format(checkIn)
				+ ", check-out: "
                + sdf.format(checkOut)
                + ", "
                + duration()
                + " nights";
	}
}	
